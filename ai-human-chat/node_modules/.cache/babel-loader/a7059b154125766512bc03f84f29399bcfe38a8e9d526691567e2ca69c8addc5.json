{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ghost Snipper\\\\Downloads\\\\Programs\\\\Chat-Bot\\\\ai-human-chat\\\\src\\\\components\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const history = useHistory();\n  useEffect(() => {\n    const handleRedirect = async () => {\n      try {\n        // Check if the current URL contains the access token from the OAuth provider\n        const params = new URLSearchParams(window.location.search);\n        const token = params.get('token');\n        if (token) {\n          // Store token in local storage or session storage\n          localStorage.setItem('accessToken', token);\n          // Redirect to the home page or authenticated content\n          history.push('/');\n        }\n      } catch (error) {\n        console.error('Redirect error:', error);\n        // Handle error\n      }\n    };\n    handleRedirect();\n  }, [history]);\n\n  // Function to handle Google login\n  const handleGoogleLogin = async () => {\n    try {\n      // Make a GET request to your backend route for Google authentication\n      const response = await axios.get('http://localhost:5000/auth/google'); // Replace with your actual backend route\n      console.log(response.data); // Handle the response data as needed\n\n      // Redirect to the home page after successful login\n      history.push('/'); // Replace '/' with the appropriate route\n    } catch (error) {\n      console.error('Google login error:', error);\n      // Handle error\n    }\n  };\n\n  // Function to handle GitHub login\n  const handleGitHubLogin = async () => {\n    try {\n      // Make a GET request to your backend route for GitHub authentication\n      const response = await axios.get('http://localhost:5000/auth/github'); // Replace with your actual backend route\n      console.log(response.data); // Handle the response data as needed\n\n      // Redirect to the home page after successful login\n      history.push('/'); // Replace '/' with the appropriate route\n    } catch (error) {\n      console.error('GitHub login error:', error);\n      // Handle error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGoogleLogin,\n      children: \"Login with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGitHubLogin,\n      children: \"Login with GitHub\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","axios","useHistory","jsxDEV","_jsxDEV","Login","_s","history","handleRedirect","params","URLSearchParams","window","location","search","token","get","localStorage","setItem","push","error","console","handleGoogleLogin","response","log","data","handleGitHubLogin","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ghost Snipper/Downloads/Programs/Chat-Bot/ai-human-chat/src/components/Login.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const handleRedirect = async () => {\r\n      try {\r\n        // Check if the current URL contains the access token from the OAuth provider\r\n        const params = new URLSearchParams(window.location.search);\r\n        const token = params.get('token');\r\n        if (token) {\r\n          // Store token in local storage or session storage\r\n          localStorage.setItem('accessToken', token);\r\n          // Redirect to the home page or authenticated content\r\n          history.push('/');\r\n        }\r\n      } catch (error) {\r\n        console.error('Redirect error:', error);\r\n        // Handle error\r\n      }\r\n    };\r\n\r\n    handleRedirect();\r\n  }, [history]);\r\n\r\n  // Function to handle Google login\r\n  const handleGoogleLogin = async () => {\r\n    try {\r\n      // Make a GET request to your backend route for Google authentication\r\n      const response = await axios.get('http://localhost:5000/auth/google'); // Replace with your actual backend route\r\n      console.log(response.data); // Handle the response data as needed\r\n\r\n      // Redirect to the home page after successful login\r\n      history.push('/'); // Replace '/' with the appropriate route\r\n    } catch (error) {\r\n      console.error('Google login error:', error);\r\n      // Handle error\r\n    }\r\n  };\r\n\r\n  // Function to handle GitHub login\r\n  const handleGitHubLogin = async () => {\r\n    try {\r\n      // Make a GET request to your backend route for GitHub authentication\r\n      const response = await axios.get('http://localhost:5000/auth/github'); // Replace with your actual backend route\r\n      console.log(response.data); // Handle the response data as needed\r\n\r\n      // Redirect to the home page after successful login\r\n      history.push('/'); // Replace '/' with the appropriate route\r\n    } catch (error) {\r\n      console.error('GitHub login error:', error);\r\n      // Handle error\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n      {/* Button to trigger Google login */}\r\n      <button onClick={handleGoogleLogin}>Login with Google</button>\r\n      {/* Button to trigger GitHub login */}\r\n      <button onClick={handleGitHubLogin}>Login with GitHub</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,OAAO,GAAGL,UAAU,CAAC,CAAC;EAE5BF,SAAS,CAAC,MAAM;IACd,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF;QACA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;QAC1D,MAAMC,KAAK,GAAGL,MAAM,CAACM,GAAG,CAAC,OAAO,CAAC;QACjC,IAAID,KAAK,EAAE;UACT;UACAE,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,KAAK,CAAC;UAC1C;UACAP,OAAO,CAACW,IAAI,CAAC,GAAG,CAAC;QACnB;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;QACvC;MACF;IACF,CAAC;IAEDX,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACD,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACc,GAAG,CAAC,mCAAmC,CAAC,CAAC,CAAC;MACvEK,OAAO,CAACG,GAAG,CAACD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;;MAE5B;MACAjB,OAAO,CAACW,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C;IACF;EACF,CAAC;;EAED;EACA,MAAMM,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF;MACA,MAAMH,QAAQ,GAAG,MAAMrB,KAAK,CAACc,GAAG,CAAC,mCAAmC,CAAC,CAAC,CAAC;MACvEK,OAAO,CAACG,GAAG,CAACD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;;MAE5B;MACAjB,OAAO,CAACW,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C;IACF;EACF,CAAC;EAED,oBACEf,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEd1B,OAAA;MAAQ2B,OAAO,EAAEV,iBAAkB;MAAAK,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE9D1B,OAAA;MAAQ2B,OAAO,EAAEN,iBAAkB;MAAAC,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEV,CAAC;AAACxB,EAAA,CA/DID,KAAK;EAAA,QACOH,UAAU;AAAA;AAAA8B,EAAA,GADtB3B,KAAK;AAiEX,eAAeA,KAAK;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}