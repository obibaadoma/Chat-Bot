{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ghost Snipper\\\\Downloads\\\\Programs\\\\Chat-Bot\\\\ai-human-chat\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\n// ChatInterface.js\nimport React, { useState } from 'react';\nimport ChatMessage from './ChatMessage';\nimport { sendMessageToChatbot } from './apiService'; // Import the API service function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const sendMessage = async message => {\n    try {\n      // Send message to backend server\n      const response = await sendMessageToChatbot(message);\n      // Assuming the backend echoes back the message with additional information\n      setMessages([...messages, {\n        text: response.message,\n        fromUser: true\n      }]);\n    } catch (error) {\n      console.error('Error sending message:', error.message);\n      // Handle error (e.g., display an error message to the user)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n      message: message\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your message...\",\n      onKeyDown: e => {\n        if (e.key === 'Enter') {\n          sendMessage(e.target.value);\n          e.target.value = '';\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendMessage('Hello!'),\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","ChatMessage","sendMessageToChatbot","jsxDEV","_jsxDEV","ChatInterface","_s","messages","setMessages","sendMessage","message","response","text","fromUser","error","console","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyDown","e","key","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ghost Snipper/Downloads/Programs/Chat-Bot/ai-human-chat/src/components/ChatInterface.js"],"sourcesContent":["// ChatInterface.js\r\nimport React, { useState } from 'react';\r\nimport ChatMessage from './ChatMessage';\r\nimport { sendMessageToChatbot } from './apiService'; // Import the API service function\r\n\r\nconst ChatInterface = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const sendMessage = async (message) => {\r\n    try {\r\n      // Send message to backend server\r\n      const response = await sendMessageToChatbot(message);\r\n      // Assuming the backend echoes back the message with additional information\r\n      setMessages([...messages, { text: response.message, fromUser: true }]);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error.message);\r\n      // Handle error (e.g., display an error message to the user)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message, index) => (\r\n        <ChatMessage key={index} message={message} />\r\n      ))}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type your message...\"\r\n        onKeyDown={(e) => {\r\n          if (e.key === 'Enter') {\r\n            sendMessage(e.target.value);\r\n            e.target.value = '';\r\n          }\r\n        }}\r\n      />\r\n      <button onClick={() => sendMessage('Hello!')}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,oBAAoB,QAAQ,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,WAAW,GAAG,MAAOC,OAAO,IAAK;IACrC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMT,oBAAoB,CAACQ,OAAO,CAAC;MACpD;MACAF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEK,IAAI,EAAED,QAAQ,CAACD,OAAO;QAAEG,QAAQ,EAAE;MAAK,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACJ,OAAO,CAAC;MACtD;IACF;EACF,CAAC;EAED,oBACEN,OAAA;IAAAY,QAAA,GACGT,QAAQ,CAACU,GAAG,CAAC,CAACP,OAAO,EAAEQ,KAAK,kBAC3Bd,OAAA,CAACH,WAAW;MAAaS,OAAO,EAAEA;IAAQ,GAAxBQ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB,CAC7C,CAAC,eACFlB,OAAA;MACEmB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,sBAAsB;MAClCC,SAAS,EAAGC,CAAC,IAAK;QAChB,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;UACrBlB,WAAW,CAACiB,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;UAC3BH,CAAC,CAACE,MAAM,CAACC,KAAK,GAAG,EAAE;QACrB;MACF;IAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACFlB,OAAA;MAAQ0B,OAAO,EAAEA,CAAA,KAAMrB,WAAW,CAAC,QAAQ,CAAE;MAAAO,QAAA,EAAC;IAAI;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEV,CAAC;AAAChB,EAAA,CAjCID,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AAmCnB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}